package com;

import java.io.BufferedReader;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.amazonaws.ClientConfiguration;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.geo.GeoDataManager;
import com.amazonaws.geo.GeoDataManagerConfiguration;
import com.amazonaws.geo.dynamodb.internal.DynamoDBManager;
import com.amazonaws.geo.model.GeoPoint;
import com.amazonaws.geo.model.GetPointRequest;
import com.amazonaws.geo.model.GetPointResult;
import com.amazonaws.geo.model.QueryRadiusRequest;
import com.amazonaws.geo.model.QueryRadiusResult;
import com.amazonaws.regions.Region;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBIndexHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.PaginatedScanList;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.dynamodbv2.model.ComparisonOperator;
import com.amazonaws.services.dynamodbv2.model.Condition;
import com.amazonaws.services.dynamodbv2.model.PutItemRequest;
import com.amazonaws.services.dynamodbv2.model.PutItemResult;
import com.amazonaws.services.dynamodbv2.model.ScanRequest;
import com.amazonaws.services.dynamodbv2.model.ScanResult;
import com.amazonaws.util.json.JSONException;
import com.amazonaws.util.json.JSONObject;

/*
 * This servlet handles the request for creating a new post.
 * The url patter is :"/create" 
 */
public class CreateServlet extends HttpServlet
{
	/*
	 * doPost : to handle post request.
	 * Following are the parameters that are set up by the 
	 * client:
	 * 
	 * 1) userno
	 * 2) posttitle
	 * 3) postcontext
	 * 
	 * Following are the actions this method takes :
	 * 
	 * 1) generate a unique postid
	 * 2) insert userno , postid, posttitle, postcontext into posttable.
	 * 3) get the geo coordinates of the userno from the usercoor.
	 * 4) use the geo library to find all the usernos which belongs in the radius(5 KM) of the the userno.
	 * 5) add the all the (postid , userno) in the unseenpost table.
	 * 6) return.
	 *   
	 * (non-Javadoc)
	 * @see javax.servlet.http.HttpServlet#doPost(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)
	 */
	static AmazonDynamoDBClient ddb = null;
	private static GeoDataManager geoDataManager = null;
	
	static String posttablename = "userposttable";
	//static String geoCoordinateTableName = "geo_coordinate_table";
	static String userCoorTableName = "usercoor";
	static Double radiusInMeter = 10000.0;
	
	private static AWSCredentials getCredentials()
	{
		String accessKey = Config.accessKey;
		String secretKey = Config.secretKey;
		return new BasicAWSCredentials(accessKey, secretKey);
		
	}
	public void doPost(HttpServletRequest req, HttpServletResponse res) throws IOException
	{
		//extract the parameters from the post request.
		
		StringBuffer stringBuffer = new StringBuffer();
		String line = null;
		BufferedReader reader = req.getReader();
		while((line = reader.readLine() )!= null)
		{
			stringBuffer.append(line);
		}
		

		JSONObject json = null;
		try 
		{
			json = new JSONObject(stringBuffer.toString());
			
		} 
		catch (JSONException e) 
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		String userno = null;
		String postcontext = null;
		String posttitle = null;
		
		try 
		{
			userno = json.getString("userno");
			postcontext = json.getString("postcontext");
			posttitle = json.getString("posttitle");
			
			
		} 
		catch (JSONException e1) 
		{
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		
		
		//generating a unique postid.
		String postid = userno +"-" +UUID.randomUUID().toString();
		
		
		AWSCredentials credentials = getCredentials();
		
		ClientConfiguration clientConfig = new ClientConfiguration();
		
		//uncomment for setting proxy
        clientConfig.setProxyHost("172.31.16.10");
        clientConfig.setProxyPort(8080);
        

		ddb = new AmazonDynamoDBClient(credentials , clientConfig);
		
		ddb.setRegion(Region.getRegion(Regions.US_EAST_1));
		
		GeoDataManagerConfiguration config = new GeoDataManagerConfiguration(ddb,userCoorTableName );
		
		geoDataManager = new GeoDataManager(config);
		
		DynamoDBMapper mapper = new DynamoDBMapper(ddb);
		
		UserPostModel item = new UserPostModel();
		item.setPostcontext(postcontext);
		item.setPosttitle(posttitle);
		item.setUserno(userno);
		item.setPostid(postid);
		item.setNumSpread(1);
		item.setNumSpams(0);
		//inserting a new post into the userposttable.
		mapper.save(item);
		
		//extracting user current coordinates from the usercoor table.
		 DynamoDBScanExpression scanExpression = new DynamoDBScanExpression();
	       scanExpression.addFilterCondition("userno", 
	                new Condition()
	       
	                    .withComparisonOperator(ComparisonOperator.EQ)
	                    .withAttributeValueList(new AttributeValue().withS(userno)));
	      
	      
	       
	    List<UserCoorModel> scanResult = mapper.scan(UserCoorModel.class, scanExpression);
	    
	    String lat = scanResult.get(0).getLat();
	    String lon = scanResult.get(0).getLon();
	    
	    
	    
	       //quering for nearby users...
	    List<String> nearByUsers = queryRadius(lat,lon, radiusInMeter);
	    
	    for(String nearByUser: nearByUsers)
	    {
	    	scanExpression = new DynamoDBScanExpression();
		       scanExpression.addFilterCondition("userno", 
		                new Condition()
		       
		                    .withComparisonOperator(ComparisonOperator.EQ)
		                    .withAttributeValueList(new AttributeValue().withS(nearByUser)));
		    List<UnseenPostModel> scanResult1 = mapper.scan(UnseenPostModel.class, scanExpression);
		    
		  
		    UnseenPostModel unseenItem = new UnseenPostModel();
		    unseenItem.setUserno(nearByUser);
	    	
		    if(scanResult1.size() == 1)
		    {
		    	unseenItem.setUnseenpostIds(scanResult1.get(0).getUnseenpostIds() + "," + postid );
		    	
		    }
		    else
		    {
		    	unseenItem.setUnseenpostIds(postid);
		    	
		    }
		    
		    
		    //inserting an entry in the unseenpost table.
		    mapper.save(unseenItem);
		   
	    }
	      
	    try {
	    	
			res.getOutputStream().write("success  gkfgkhff".getBytes(Charset.forName("UTF-8")));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	    
	}
	private static List<String> queryRadius(String lat, String lon, Double radiusInMeter)
	{
		List<String > retVal = new ArrayList<String>();
		
		GeoPoint centerPoint = new GeoPoint(Double.valueOf(lat), Double.valueOf(lon));
		
		List<String> attributesToGet = new ArrayList<String>();
		
		attributesToGet.add("userno");
		attributesToGet.add("geoJson");
		QueryRadiusRequest queryRadiusRequest = new QueryRadiusRequest(centerPoint, radiusInMeter);
		
		queryRadiusRequest.getQueryRequest().setAttributesToGet(attributesToGet);
		
		QueryRadiusResult queryRadiusResult = geoDataManager.queryRadius(queryRadiusRequest);
		
	
		
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		
		List<Map<String, String>> resultArray = new ArrayList<Map<String, String>>();

		for (Map<String, AttributeValue> item : queryRadiusResult.getItem()) 
		{
			Map<String, String> itemMap = new HashMap<String, String>();

			String userno = item.get("userno").getS();
			
			
			
			retVal.add(userno);
			
		}
		return retVal;
	}
	
	private Map<String, AttributeValue> newItem(String userno,String posttitle, String postcontext) 
	{
		Map<String, AttributeValue> item = new HashMap<String, AttributeValue>();
	    item.put("postid", new AttributeValue("gk"));
		item.put("userno", new AttributeValue(userno));
	    item.put("posttitle", new AttributeValue(posttitle));
	    item.put("postcontext", new AttributeValue(postcontext));

	    return item;
	
	}

	
	
}
