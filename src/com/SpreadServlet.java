package com;

import java.io.IOException;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import com.amazonaws.ClientConfiguration;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.geo.GeoDataManager;
import com.amazonaws.geo.GeoDataManagerConfiguration;
import com.amazonaws.geo.dynamodb.internal.DynamoDBManager;
import com.amazonaws.geo.model.GeoPoint;
import com.amazonaws.geo.model.GetPointRequest;
import com.amazonaws.geo.model.GetPointResult;
import com.amazonaws.geo.model.QueryRadiusRequest;
import com.amazonaws.geo.model.QueryRadiusResult;
import com.amazonaws.regions.Region;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.dynamodbv2.AmazonDynamoDBClient;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAttribute;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBAutoGeneratedKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBIndexHashKey;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBMapper;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBScanExpression;
import com.amazonaws.services.dynamodbv2.datamodeling.DynamoDBTable;
import com.amazonaws.services.dynamodbv2.datamodeling.PaginatedScanList;
import com.amazonaws.services.dynamodbv2.document.AttributeUpdate;
import com.amazonaws.services.dynamodbv2.document.DynamoDB;
import com.amazonaws.services.dynamodbv2.document.Table;
import com.amazonaws.services.dynamodbv2.document.UpdateItemOutcome;
import com.amazonaws.services.dynamodbv2.document.spec.UpdateItemSpec;
import com.amazonaws.services.dynamodbv2.model.AttributeValue;
import com.amazonaws.services.dynamodbv2.model.ComparisonOperator;
import com.amazonaws.services.dynamodbv2.model.Condition;
import com.amazonaws.services.dynamodbv2.model.PutItemRequest;
import com.amazonaws.services.dynamodbv2.model.PutItemResult;
import com.amazonaws.services.dynamodbv2.model.ScanRequest;
import com.amazonaws.services.dynamodbv2.model.ScanResult;

/*
 * 
 * SpreadServlet:
 * This sevlet will handle the spread request by the user.
 * Servlet called when the user presses the SPREAD button the app.
 * 
 * 
 */
public class SpreadServlet extends HttpServlet
{
	
	static AmazonDynamoDBClient ddb = null;
	private static GeoDataManager geoDataManager = null;
	
	static String posttablename = "userposttable";
	static String geoCoordinateTableName = "geo_coordinate_table";
	static String userCoorTableName = "usercoor";
	static Double radiusInMeter = 100000.0;

	private static AWSCredentials getCredentials()
	{
		String accessKey = "AKIAJALYAP3LBXFUKMOA";
		String secretKey = "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";
		return new BasicAWSCredentials(accessKey, secretKey);
		
	}
	
	/**
	 * 
	 * Following the method dopost to handle the request.
	 * Following are parameters in the http request objects:
	 * 
	 *  1) userno		:The no of the user who is spreading the post  
	 *  2) spreadPostId :The post is of the post to be spread.
	 *  
	 *  Following is the algorithm to be followed:
	 *  
	 *  1) get the current coordinates of the userno.
	 *  2) query the geo_Coordinate_table for the nearBy users.
	 *  3) for each nearByUser get the unseenpost from the table. It contains comma separated postids.
	 *  4) split on the comma, and check whether the postid is already present or not.
	 *  5) if present ignore, if not then concatenate it to the unseenpost string. 
	 *  3) insert an entry in the unseenpost table (postId , nearByUser).
	 *  4) return
	 *  
	 * @param args
	 * @throws IOException 
	 */
		public void doGet(HttpServletRequest req, HttpServletResponse res) throws IOException 
		{
		//extract the parameters from the post request.
		
		String userno = req.getParameter("userno");
		String postid = req.getParameter("postid");
		
		
		AWSCredentials credentials = getCredentials();
		
		ClientConfiguration clientConfig = new ClientConfiguration();
		
		//uncomment for setting proxy
        //clientConfig.setProxyHost("172.31.16.10");
        //clientConfig.setProxyPort(8080);
        

		ddb = new AmazonDynamoDBClient(credentials , clientConfig);
		
		ddb.setRegion(Region.getRegion(Regions.US_EAST_1));
		
		GeoDataManagerConfiguration config = new GeoDataManagerConfiguration(ddb,geoCoordinateTableName );
		
		geoDataManager = new GeoDataManager(config);
		
		DynamoDBMapper mapper = new DynamoDBMapper(ddb);
		
		
		
		//extracting user current coordinates from the usercoor table.
		 DynamoDBScanExpression scanExpression = new DynamoDBScanExpression();
	       scanExpression.addFilterCondition("userno", 
	                new Condition()
	       
	                    .withComparisonOperator(ComparisonOperator.EQ)
	                    .withAttributeValueList(new AttributeValue().withS(userno)));
	      
	      
	       
	    List<UserCoorModel> scanResult = mapper.scan(UserCoorModel.class, scanExpression);
	    
	    String lat = scanResult.get(0).getLat();
	    String lon = scanResult.get(0).getLon();
	    
	
	    
	    
	     
	    //quering for nearby users...
	    List<String> nearByUsers = queryRadius(lat, lon, radiusInMeter);
	    
	    for(String nearByUser: nearByUsers)
	    {
	    	if(!userno.equals(nearByUser))
	    	{
	    		scanExpression = new DynamoDBScanExpression();
		    	
			    
		    	scanExpression.addFilterCondition("userno", new Condition()
			                    .withComparisonOperator(ComparisonOperator.EQ)
			                    .withAttributeValueList(new AttributeValue().withS(nearByUser)));
		    	
			    List<UnseenPostModel> unseenPostResult = mapper.scan(UnseenPostModel.class, scanExpression);
			    
			   
			    
			    UnseenPostModel unseenItem = new UnseenPostModel();
			    unseenItem.setUserno(nearByUser);
		    	
			    if(unseenPostResult.size() == 1)
			    {
			    	String unseenPostIdsString = unseenPostResult.get(0).getUnseenpostIds();
			    	String [] unseenPostIdsArray = unseenPostIdsString.split(",");
			    	boolean present = false;
			    	for(String str : unseenPostIdsArray)
			    	{
			    		if(str.equals(postid))
			    		{
			    			present = true;
			    			break;
			    			
			    		}
			    	}
			    	if(present == false)
			    	{
			    		unseenItem.setUnseenpostIds(unseenPostIdsString + "," + postid);
			    	}
			    }
			    else
			    {
			    	unseenItem.setUnseenpostIds(postid);
			    	
			    }
			    
			    //inserting an entry in the unseenpost table.
			    mapper.save(unseenItem);
			
	    		
	    	}
	    	
	    }
	      
	    DynamoDB dynamoDB = new DynamoDB(ddb);
	    Table table = dynamoDB.getTable(posttablename);
	    
	    
	    List<AttributeUpdate> list = new ArrayList<AttributeUpdate>();
	    
	    list.add(new AttributeUpdate("numspread").addNumeric(1));
	    
	    UpdateItemSpec updateItemSpec = new UpdateItemSpec()
        .withPrimaryKey("postid", postid)
        .withAttributeUpdate(list);
    
        
        
        UpdateItemOutcome outcome =  table.updateItem(updateItemSpec);
	    
        res.getOutputStream().write("success".getBytes(Charset.forName("UTF-8")));
	}
	private static List<String> queryRadius(String lat, String lon, Double radiusInMeter)
	{
		List<String > retVal = new ArrayList<String>();
		
		GeoPoint centerPoint = new GeoPoint(Double.valueOf(lat), Double.valueOf(lon));
		
		List<String> attributesToGet = new ArrayList<String>();
		
		attributesToGet.add("userno");
		attributesToGet.add("geoJson");
		QueryRadiusRequest queryRadiusRequest = new QueryRadiusRequest(centerPoint, radiusInMeter);
		
		queryRadiusRequest.getQueryRequest().setAttributesToGet(attributesToGet);
		
		QueryRadiusResult queryRadiusResult = geoDataManager.queryRadius(queryRadiusRequest);
		
	
		
		Map<String, Object> jsonMap = new HashMap<String, Object>();
		
		List<Map<String, String>> resultArray = new ArrayList<Map<String, String>>();

		for (Map<String, AttributeValue> item : queryRadiusResult.getItem()) 
		{
			Map<String, String> itemMap = new HashMap<String, String>();

			String userno = item.get("userno").getS();
			
			
			retVal.add(userno);
			
		}
		return retVal;
	}
	
	private Map<String, AttributeValue> newItem(String userno,String posttitle, String postcontext) 
	{
		Map<String, AttributeValue> item = new HashMap<String, AttributeValue>();
	    item.put("postid", new AttributeValue("gk"));
		item.put("userno", new AttributeValue(userno));
	    item.put("posttitle", new AttributeValue(posttitle));
	    item.put("postcontext", new AttributeValue(postcontext));

	    return item;
	
	}
	

	
	
}
